import{_ as i,c as a,o as e,ag as o}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"前端部署运维","description":"","frontmatter":{},"headers":[],"relativePath":"src/O&M/front-om/front-omcopy.md","filePath":"src/O&M/front-om/front-omcopy.md","lastUpdated":1737139361000}'),r={name:"src/O&M/front-om/front-omcopy.md"};function t(n,l,h,s,c,d){return e(),a("div",null,l[0]||(l[0]=[o('<h1 id="前端部署运维" tabindex="-1">前端部署运维 <a class="header-anchor" href="#前端部署运维" aria-label="Permalink to &quot;前端部署运维&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>前端部署运维是指将前端代码部署到线上环境，并保证其正常运行，包括代码更新、发布、回滚、监控、容灾、日志、性能分析等。</p><p>前端部署运维的主要工作内容如下：</p><ul><li>代码发布：将前端代码发布到线上环境，包括代码更新、发布、回滚等。</li><li>监控：对线上环境的运行状态进行监控，包括系统资源、业务指标、日志、错误、异常等。</li><li>容灾：保证线上环境的高可用，包括主备切换、流量切换、服务器扩容、网络隔离等。</li><li>日志：对线上环境的运行日志进行收集、分析、存储、检索、展示等。</li><li>性能分析：对线上环境的运行性能进行分析，包括系统资源占用、业务指标、接口响应时间、页面加载时间等。</li></ul><h2 id="部署流程" tabindex="-1">部署流程 <a class="header-anchor" href="#部署流程" aria-label="Permalink to &quot;部署流程&quot;">​</a></h2><p>前端部署流程一般分为以下几个步骤：</p><ol><li>代码发布：将前端代码发布到线上环境，包括代码更新、发布、回滚等。</li><li>编译打包：编译打包前端代码，生成编译后的代码。</li><li>静态资源部署：将编译后的代码部署到线上环境的静态资源服务器。</li><li>数据库部署：将线上环境的数据库部署到线上环境的数据库服务器。</li><li>代码部署：将编译后的代码部署到线上环境的应用服务器。</li><li>启动服务：启动线上环境的应用服务器。</li><li>监控：对线上环境的运行状态进行监控，包括系统资源、业务指标、日志、错误、异常等。</li><li>容灾：保证线上环境的高可用，包括主备切换、流量切换、服务器扩容、网络隔离等。</li><li>日志：对线上环境的运行日志进行收集、分析、存储、检索、展示等。</li><li>性能分析：对线上环境的运行性能进行分析，包括系统资源占用、业务指标、接口响应时间、页面加载时间等。</li></ol><h2 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h2><h3 id="_1-前端部署流程" tabindex="-1">1. 前端部署流程 <a class="header-anchor" href="#_1-前端部署流程" aria-label="Permalink to &quot;1. 前端部署流程&quot;">​</a></h3><p>前端部署流程一般分为以下几个步骤：</p><ol><li>代码发布：将前端代码发布到线上环境，包括代码更新、发布、回滚等。</li><li>编译打包：编译打包前端代码，生成编译后的代码。</li><li>静态资源部署：将编译后的代码部署到线上环境的静态资源服务器。</li><li>数据库部署：将线上环境的数据库部署到线上环境的数据库服务器。</li><li>代码部署：将编译后的代码部署到线上环境的应用服务器。</li><li>启动服务：启动线上环境的应用服务器。</li><li>监控：对线上环境的运行状态进行监控，包括系统资源、业务指标、日志、错误、异常等。</li><li>容灾：保证线上环境的高可用，包括主备切换、流量切换、服务器扩容、网络隔离等。</li><li>日志：对线上环境的运行日志进行收集、分析、存储、检索、展示等。</li><li>性能分析：对线上环境的运行性能进行分析，包括系统资源占用、业务指标、接口响应时间、页面加载时间等。</li></ol><h3 id="_2-前端部署工具" tabindex="-1">2. 前端部署工具 <a class="header-anchor" href="#_2-前端部署工具" aria-label="Permalink to &quot;2. 前端部署工具&quot;">​</a></h3><p>前端部署工具一般包括以下几种：</p><ol><li>Git：版本控制工具，用于代码管理。</li><li>Nginx：静态资源服务器，用于部署静态资源。</li><li>Docker：容器化工具，用于部署应用。</li><li>Kubernetes：容器编排工具，用于管理容器。</li><li>Jenkins：持续集成工具，用于自动化部署。</li><li>Prometheus：监控工具，用于监控线上环境。</li><li>Grafana：可视化工具，用于展示监控数据。</li><li>Zabbix：容灾工具，用于实现高可用。</li><li>Elasticsearch：日志分析工具，用于收集、分析、存储、检索、展示日志。</li><li>Skywalking：性能分析工具，用于分析线上环境的性能。</li></ol><h3 id="_3-前端部署环境" tabindex="-1">3. 前端部署环境 <a class="header-anchor" href="#_3-前端部署环境" aria-label="Permalink to &quot;3. 前端部署环境&quot;">​</a></h3><p>前端部署环境一般包括以下几种：</p><ol><li>开发环境：用于开发前端代码，包括本地开发环境、测试环境、预发布环境、生产环境等。</li><li>线上环境：用于部署前端代码，包括测试环境、预发布环境、生产环境等。</li><li>灰度环境：用于测试新功能，包括测试环境、预发布环境等。</li><li>备份环境：用于备份线上环境，包括测试环境、预发布环境、生产环境等。</li><li>灾难恢复环境：用于灾难恢复，包括测试环境、预发布环境、生产环境等。</li></ol><h3 id="_4-前端部署策略" tabindex="-1">4. 前端部署策略 <a class="header-anchor" href="#_4-前端部署策略" aria-label="Permalink to &quot;4. 前端部署策略&quot;">​</a></h3><p>前端部署策略一般包括以下几种：</p><ol><li>蓝绿部署：蓝色环境用于部署新功能，绿色环境用于验证新功能。</li><li>灰度发布：将新功能部署到一小部分用户，验证无误后再全量部署。</li><li>金丝雀发布：将新功能部署到一小部分用户，验证无误后再全量部署。</li><li>回滚策略：当新功能出现问题时，可以回滚到上一个版本。</li><li>灾难恢复策略：当线上环境出现故障时，可以快速切换到备份环境。</li></ol><h3 id="_5-前端部署监控" tabindex="-1">5. 前端部署监控 <a class="header-anchor" href="#_5-前端部署监控" aria-label="Permalink to &quot;5. 前端部署监控&quot;">​</a></h3><p>前端部署监控一般包括以下几种：</p><ol><li>系统资源监控：监控服务器资源使用情况，包括 CPU、内存、磁盘、网络等。</li><li>业务指标监控：监控业务指标，包括用户访问量、页面加载时间、接口响应时间等。</li><li>日志监控：监控日志，包括错误日志、异常日志、访问日志等。</li><li>错误监控：监控错误，包括前端错误、后端错误、接口错误等。</li><li>性能分析：分析系统性能瓶颈，包括 CPU、内存、网络、数据库等。</li><li>容灾监控：监控容灾，包括主备切换、流量切换、服务器扩容、网络隔离等。</li></ol><h3 id="_6-前端部署工具推荐" tabindex="-1">6. 前端部署工具推荐 <a class="header-anchor" href="#_6-前端部署工具推荐" aria-label="Permalink to &quot;6. 前端部署工具推荐&quot;">​</a></h3><p>前端部署工具推荐包括以下几种：</p><ol><li>Git：Git 是目前最流行的版本控制工具，可以实现代码管理、发布、回滚等功能。</li><li>Nginx：Nginx 是目前最流行的静态资源服务器，可以实现静态资源部署、负载均衡等功能。</li><li>Docker：Docker 可以实现应用部署、容器化、容器编排等功能。</li><li>Kubernetes：Kubernetes 可以实现容器集群管理、自动扩容、自动调度等功能。</li><li>Jenkins：Jenkins 可以实现自动化部署、持续集成、自动化测试等功能。</li><li>Prometheus：Prometheus 可以实现监控、告警、可视化等功能。</li><li>Grafana：Grafana 可以实现可视化展示监控数据。</li><li>Zabbix：Zabbix 可以实现容灾、故障发现、故障自愈等功能。</li><li>Elasticsearch：Elasticsearch 可以实现日志收集、分析、存储、检索、展示等功能。</li><li>Skywalking：Skywalking 可以实现性能分析、问题定位等功能。</li></ol>',27)]))}const _=i(r,[["render",t]]);export{u as __pageData,_ as default};
