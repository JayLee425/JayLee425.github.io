import{_ as t,c as l,o as r,ag as o}from"./chunks/framework.DPDPlp3K.js";const p=JSON.parse('{"title":"Kubernetes","description":"","frontmatter":{},"headers":[],"relativePath":"src/O&M/docker-k8s/kubernetes.md","filePath":"src/O&M/docker-k8s/kubernetes.md","lastUpdated":1737139361000}'),a={name:"src/O&M/docker-k8s/kubernetes.md"};function i(n,e,d,c,s,u){return r(),l("div",null,e[0]||(e[0]=[o('<h1 id="kubernetes" tabindex="-1">Kubernetes <a class="header-anchor" href="#kubernetes" aria-label="Permalink to &quot;Kubernetes&quot;">​</a></h1><p>Kubernetes 是 Google 开源的容器集群管理系统，它可以自动化地部署、扩展和管理容器化的应用。Kubernetes 的目标是让部署容器化应用简单并且高效，让你能够专注于应用的开发、测试和发布，而不是底层的基础设施。Kubernetes 是一个开源的容器编排平台，它可以帮助你自动化地部署、扩展和管理容器化应用程序。Kubernetes 提供了丰富的功能和工具，可以帮助你实现高可用性、负载均衡、服务发现、自动扩缩容等功能。</p><p>Kubernetes 由以下几个主要组件组成：</p><ul><li>Master 节点：负责管理集群，包括调度、分配资源、运行应用等。</li><li>Node 节点：运行容器化应用的主机，可以是物理机或虚拟机。</li><li>Control Plane：集群的核心组件，包括 API Server、Scheduler、Controller Manager 和 etcd。</li><li>Container Runtime：负责运行容器化应用，比如 Docker。</li></ul><h2 id="kubernetes-架构" tabindex="-1">Kubernetes 架构 <a class="header-anchor" href="#kubernetes-架构" aria-label="Permalink to &quot;Kubernetes 架构&quot;">​</a></h2><p>Kubernetes 的架构可以分为以下几个层次：</p><ul><li>应用层：包括用户应用和 Kubernetes API。</li><li>控制层：包括 API Server、Scheduler、Controller Manager 和 etcd。</li><li>资源层：包括 Node 节点、Container Runtime 和网络。</li><li>网络层：包括 Kubernetes 网络插件，如 Calico、Flannel 等。</li></ul><p><img src="https://d33wubrfki0l68.cloudfront.net/e1c7d9d5d5/b7a7d/images/docs/kubernetes-arch.svg" alt="Kubernetes 架构"></p><h2 id="kubernetes-组件" tabindex="-1">Kubernetes 组件 <a class="header-anchor" href="#kubernetes-组件" aria-label="Permalink to &quot;Kubernetes 组件&quot;">​</a></h2><p>Kubernetes 由以下几个主要组件组成：</p><ul><li>Master 节点：负责管理集群，包括调度、分配资源、运行应用等。</li><li>Node 节点：运行容器化应用的主机，可以是物理机或虚拟机。</li><li>Control Plane：集群的核心组件，包括 API Server、Scheduler、Controller Manager 和 etcd。</li><li>Container Runtime：负责运行容器化应用，比如 Docker。</li></ul><h3 id="master-节点" tabindex="-1">Master 节点 <a class="header-anchor" href="#master-节点" aria-label="Permalink to &quot;Master 节点&quot;">​</a></h3><p>Master 节点主要包括以下几个组件：</p><ul><li>API Server：提供 Kubernetes API，包括集群的配置、状态和操作。</li><li>Scheduler：负责资源的调度，将 Pod 调度到相应的 Node 节点上。</li><li>Controller Manager：负责运行控制器，比如副本控制器、Endpoints 控制器等。</li><li>etcd：用于存储 Kubernetes 集群的配置和状态信息。</li></ul><h3 id="node-节点" tabindex="-1">Node 节点 <a class="header-anchor" href="#node-节点" aria-label="Permalink to &quot;Node 节点&quot;">​</a></h3><p>Node 节点主要包括以下几个组件：</p><ul><li>Kubelet：负责运行容器化应用，监听 API Server，接受并执行指令。</li><li>Container Runtime：负责运行容器化应用，比如 Docker。</li></ul><h3 id="control-plane" tabindex="-1">Control Plane <a class="header-anchor" href="#control-plane" aria-label="Permalink to &quot;Control Plane&quot;">​</a></h3><p>Control Plane 主要包括以下几个组件：</p><ul><li>API Server：提供 Kubernetes API，包括集群的配置、状态和操作。</li><li>Scheduler：负责资源的调度，将 Pod 调度到相应的 Node 节点上。</li><li>Controller Manager：负责运行控制器，比如副本控制器、Endpoints 控制器等。</li><li>etcd：用于存储 Kubernetes 集群的配置和状态信息。</li></ul><h3 id="container-runtime" tabindex="-1">Container Runtime <a class="header-anchor" href="#container-runtime" aria-label="Permalink to &quot;Container Runtime&quot;">​</a></h3><p>Container Runtime 主要包括以下几个组件：</p><ul><li>Docker：负责运行容器化应用，比如 Docker。</li><li>rkt：负责运行容器化应用，比如 rkt。</li><li>CRI（Container Runtime Interface）：提供容器运行时接口，比如 CRI-O、CRI-containerd。</li></ul><h2 id="kubernetes-工作流程" tabindex="-1">Kubernetes 工作流程 <a class="header-anchor" href="#kubernetes-工作流程" aria-label="Permalink to &quot;Kubernetes 工作流程&quot;">​</a></h2><p>Kubernetes 的工作流程如下图所示：</p><p><img src="https://d33wubrfki0l68.cloudfront.net/e1c7d9d5d5/b7a7d/images/docs/kubernetes-overview.svg" alt="Kubernetes 工作流程"></p><p>Kubernetes 工作流程可以分为以下几个步骤：</p><ol><li>用户提交应用定义（YAML 文件）到 API Server。</li><li>API Server 验证应用定义，并将其存储到 etcd 中。</li><li>Scheduler 监听 etcd 中的应用定义，并将 Pod 调度到相应的 Node 节点上。</li><li>Kubelet 监听 API Server，并启动 Pod。</li><li>Kubelet 向 API Server 发送状态信息。</li><li>Controller Manager 监听 API Server，并根据副本控制器、Endpoints 控制器等控制器的要求，调整 Pod 的副本数量和 Endpoint 信息。</li><li>应用运行成功。</li></ol><h2 id="kubernetes-常用命令" tabindex="-1">Kubernetes 常用命令 <a class="header-anchor" href="#kubernetes-常用命令" aria-label="Permalink to &quot;Kubernetes 常用命令&quot;">​</a></h2><p>Kubernetes 提供了丰富的命令行工具，可以帮助你管理集群和应用程序。以下是一些常用的命令：</p><ul><li><code>kubectl get nodes</code>：获取集群中的节点信息。</li><li><code>kubectl get pods</code>：获取集群中的 Pod 信息。</li><li><code>kubectl get services</code>：获取集群中的服务信息。</li><li><code>kubectl get deployments</code>：获取集群中的部署信息。</li><li><code>kubectl get replicasets</code>：获取集群中的副本集信息。</li><li><code>kubectl get configmaps</code>：获取集群中的配置映射信息。</li><li><code>kubectl get secrets</code>：获取集群中的密钥信息。</li><li><code>kubectl describe pod &lt;pod-name&gt;</code>：获取 Pod 的详细信息。</li><li><code>kubectl logs &lt;pod-name&gt;</code>：获取 Pod 的日志信息。</li><li><code>kubectl exec &lt;pod-name&gt; -- &lt;command&gt;</code>：在 Pod 中执行命令。</li><li><code>kubectl port-forward &lt;pod-name&gt; &lt;local-port&gt;:&lt;remote-port&gt;</code>：将本地端口映射到 Pod 的端口。</li><li><code>kubectl create deployment &lt;deployment-name&gt; --image=&lt;image&gt;</code>：创建部署。</li><li><code>kubectl delete deployment &lt;deployment-name&gt;</code>：删除部署。</li><li><code>kubectl scale deployment &lt;deployment-name&gt; --replicas=&lt;number&gt;</code>：调整部署的副本数量。</li><li><code>kubectl expose deployment &lt;deployment-name&gt; --port=&lt;port&gt;</code>：暴露部署的服务。</li><li><code>kubectl run &lt;pod-name&gt; --image=&lt;image&gt; --port=&lt;port&gt;</code>：运行 Pod。</li><li><code>kubectl delete pod &lt;pod-name&gt;</code>：删除 Pod。</li><li><code>kubectl apply -f &lt;file&gt;</code>：创建资源。</li><li><code>kubectl delete -f &lt;file&gt;</code>：删除资源。</li><li><code>kubectl replace -f &lt;file&gt;</code>：替换资源。</li></ul><h2 id="kubernetes-参考资料" tabindex="-1">Kubernetes 参考资料 <a class="header-anchor" href="#kubernetes-参考资料" aria-label="Permalink to &quot;Kubernetes 参考资料&quot;">​</a></h2><ul><li><a href="https://kubernetes.io/docs/home/" target="_blank" rel="noreferrer">Kubernetes 官方文档</a></li><li><a href="https://www.youtube.com/playlist?list=PL7bmigfV0EqQzxcNpmcdTJ9eFRPBe-iZa" target="_blank" rel="noreferrer">Kubernetes 官方视频</a></li><li><a href="https://kubernetes.io/blog/" target="_blank" rel="noreferrer">Kubernetes 官方博客</a></li><li><a href="https://www.kubernetes.org.cn/" target="_blank" rel="noreferrer">Kubernetes 中文社区</a></li><li><a href="https://github.com/kubernetes/kubernetes/tree/master/docs/concepts/cluster-administration/best-practices" target="_blank" rel="noreferrer">Kubernetes 最佳实践</a></li><li><a href="https://kubernetes.io/zh/docs/setup/best-practices/" target="_blank" rel="noreferrer">Kubernetes 最佳实践 - 官方文档</a></li></ul>',33)]))}const k=t(a,[["render",i]]);export{p as __pageData,k as default};
