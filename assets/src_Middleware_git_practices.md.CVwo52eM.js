import{_ as i,c as l,o as a,ag as o}from"./chunks/framework.DPDPlp3K.js";const g=JSON.parse('{"title":"最佳实践 （❎ 占位待优化 ❎）","description":"","frontmatter":{},"headers":[],"relativePath":"src/Middleware/git/practices.md","filePath":"src/Middleware/git/practices.md","lastUpdated":1742528322000}'),t={name:"src/Middleware/git/practices.md"};function d(c,e,r,s,u,h){return a(),l("div",null,e[0]||(e[0]=[o('<h1 id="最佳实践-❎-占位待优化-❎" tabindex="-1">最佳实践 （❎ 占位待优化 ❎） <a class="header-anchor" href="#最佳实践-❎-占位待优化-❎" aria-label="Permalink to &quot;最佳实践 （❎ 占位待优化 ❎）&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">⏰ .gitignore文件修改不提交</p><ol><li>修改不提交</li></ol><p>git update-index --no-assume-unchanged .gitignore</p><ol start="2"><li>取消修改</li></ol><p>git update-index --assume-unchanged .gitignore</p></div><h2 id="分支管理" tabindex="-1">分支管理 <a class="header-anchor" href="#分支管理" aria-label="Permalink to &quot;分支管理&quot;">​</a></h2><ul><li>使用 <code>git branch</code> 管理分支</li><li>使用 <code>git checkout</code> 切换分支</li><li>使用 <code>git merge</code> 合并分支</li><li>使用 <code>git rebase</code> 变基操作</li></ul><h2 id="标签管理" tabindex="-1">标签管理 <a class="header-anchor" href="#标签管理" aria-label="Permalink to &quot;标签管理&quot;">​</a></h2><ul><li>使用 <code>git tag</code> 管理标签</li><li>使用 <code>git push --tags</code> 推送标签到远程仓库</li><li>使用 <code>git fetch --tags</code> 拉取标签</li></ul><h2 id="合并管理" tabindex="-1">合并管理 <a class="header-anchor" href="#合并管理" aria-label="Permalink to &quot;合并管理&quot;">​</a></h2><ul><li>使用 <code>git merge</code> 合并分支</li><li>使用 <code>git rebase</code> 变基操作</li><li>使用 <code>git cherry-pick</code> 选择提交应用到当前分支</li></ul><h2 id="冲突管理" tabindex="-1">冲突管理 <a class="header-anchor" href="#冲突管理" aria-label="Permalink to &quot;冲突管理&quot;">​</a></h2><ul><li>使用 <code>git status</code> 查看冲突</li><li>使用 <code>git add</code> 添加冲突文件到暂存区</li><li>使用 <code>git commit</code> 提交冲突文件</li></ul><h2 id="撤销管理" tabindex="-1">撤销管理 <a class="header-anchor" href="#撤销管理" aria-label="Permalink to &quot;撤销管理&quot;">​</a></h2><ul><li>使用 <code>git revert</code> 撤销指定提交</li><li>使用 <code>git reset</code> 重置指定提交</li><li>使用 <code>git checkout --</code> 撤销指定文件</li></ul><h2 id="回滚管理" tabindex="-1">回滚管理 <a class="header-anchor" href="#回滚管理" aria-label="Permalink to &quot;回滚管理&quot;">​</a></h2><ul><li>使用 <code>git revert</code> 撤销指定提交</li><li>使用 <code>git reset</code> 重置指定提交</li><li>使用 <code>git checkout --</code> 撤销指定文件</li></ul><h2 id="工作区管理" tabindex="-1">工作区管理 <a class="header-anchor" href="#工作区管理" aria-label="Permalink to &quot;工作区管理&quot;">​</a></h2><ul><li>使用 <code>git status</code> 查看工作区状态</li><li>使用 <code>git add</code> 添加文件到暂存区</li><li>使用 <code>git commit</code> 提交文件</li></ul><h2 id="远程管理" tabindex="-1">远程管理 <a class="header-anchor" href="#远程管理" aria-label="Permalink to &quot;远程管理&quot;">​</a></h2><ul><li>使用 <code>git push</code> 推送文件到远程仓库</li><li>使用 <code>git pull</code> 拉取远程仓库文件</li><li>使用 <code>git fetch</code> 拉取远程仓库文件</li><li>使用 <code>git remote</code> 管理远程仓库</li></ul><h2 id="子模块管理" tabindex="-1">子模块管理 <a class="header-anchor" href="#子模块管理" aria-label="Permalink to &quot;子模块管理&quot;">​</a></h2><ul><li>使用 <code>git submodule</code> 管理子模块</li><li>使用 <code>git submodule update</code> 更新子模块</li><li>使用 <code>git submodule init</code> 初始化子模块</li><li>使用 <code>git submodule add</code> 添加子模块</li><li>使用 <code>git submodule deinit</code> 取消子模块初始化</li><li>使用 <code>git submodule foreach</code> 遍历子模块</li><li>使用 <code>git submodule status</code> 查看子模块状态</li></ul>',20)]))}const m=i(t,[["render",d]]);export{g as __pageData,m as default};
