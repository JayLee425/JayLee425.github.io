import{_ as a,c as l,o as t,ag as e}from"./chunks/framework.DPDPlp3K.js";const d=JSON.parse('{"title":"Spring Design Pattern","description":"","frontmatter":{},"headers":[],"relativePath":"src/backend/spring-framework/spring-design-pattern.md","filePath":"src/backend/spring-framework/spring-design-pattern.md","lastUpdated":1739530875000}'),r={name:"src/backend/spring-framework/spring-design-pattern.md"};function n(o,i,h,s,c,u){return t(),l("div",null,i[0]||(i[0]=[e('<h1 id="spring-design-pattern" tabindex="-1">Spring Design Pattern <a class="header-anchor" href="#spring-design-pattern" aria-label="Permalink to &quot;Spring Design Pattern&quot;">​</a></h1><h2 id="spring-源码中的设计模式" tabindex="-1">Spring 源码中的设计模式 <a class="header-anchor" href="#spring-源码中的设计模式" aria-label="Permalink to &quot;Spring 源码中的设计模式&quot;">​</a></h2><h2 id="_1-工厂模式" tabindex="-1">1. 工厂模式 <a class="header-anchor" href="#_1-工厂模式" aria-label="Permalink to &quot;1. 工厂模式&quot;">​</a></h2><ul><li>核心接口：BeanFactory</li><li>核心实现：DefaultListableBeanFactory</li><li>使用场景：Spring IoC 容器通过工厂模式创建和管理 Bean 对象</li></ul><h2 id="_2-单例模式" tabindex="-1">2. 单例模式 <a class="header-anchor" href="#_2-单例模式" aria-label="Permalink to &quot;2. 单例模式&quot;">​</a></h2><ul><li>核心接口：Singleton</li><li>核心实现：DefaultSingletonBeanRegistry</li><li>使用场景：Spring 容器管理单例 Bean 对象</li></ul><h2 id="_3-观察者模式" tabindex="-1">3. 观察者模式 <a class="header-anchor" href="#_3-观察者模式" aria-label="Permalink to &quot;3. 观察者模式&quot;">​</a></h2><ul><li>核心接口：Observer</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 事件机制</li></ul><h2 id="_4-适配器模式" tabindex="-1">4. 适配器模式 <a class="header-anchor" href="#_4-适配器模式" aria-label="Permalink to &quot;4. 适配器模式&quot;">​</a></h2><ul><li>核心接口：Adapter</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 适配器模式用于将不同的接口适配成统一的接口</li></ul><h2 id="_5-装饰器模式" tabindex="-1">5. 装饰器模式 <a class="header-anchor" href="#_5-装饰器模式" aria-label="Permalink to &quot;5. 装饰器模式&quot;">​</a></h2><ul><li>核心接口：Decorator</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 装饰器模式用于增强 Bean 的功能</li></ul><h2 id="_6-代理模式" tabindex="-1">6. 代理模式 <a class="header-anchor" href="#_6-代理模式" aria-label="Permalink to &quot;6. 代理模式&quot;">​</a></h2><ul><li>核心接口：Proxy</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 代理模式用于控制对 Bean 的访问</li></ul><h2 id="_7-策略模式" tabindex="-1">7. 策略模式 <a class="header-anchor" href="#_7-策略模式" aria-label="Permalink to &quot;7. 策略模式&quot;">​</a></h2><ul><li>核心接口：Strategy</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 策略模式用于根据不同的策略选择不同的实现</li></ul><h2 id="_8-模板方法模式" tabindex="-1">8. 模板方法模式 <a class="header-anchor" href="#_8-模板方法模式" aria-label="Permalink to &quot;8. 模板方法模式&quot;">​</a></h2><ul><li>核心接口：TemplateMethod</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 模板方法模式用于定义算法的骨架，具体的实现由子类完成</li></ul><h2 id="_9-责任链模式" tabindex="-1">9. 责任链模式 <a class="header-anchor" href="#_9-责任链模式" aria-label="Permalink to &quot;9. 责任链模式&quot;">​</a></h2><ul><li>核心接口：ChainOfResponsibility</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 责任链模式用于将请求处理流程分解成多个处理器，每个处理器可以决定是否继续处理请求</li></ul><h2 id="_10-迭代器模式" tabindex="-1">10. 迭代器模式 <a class="header-anchor" href="#_10-迭代器模式" aria-label="Permalink to &quot;10. 迭代器模式&quot;">​</a></h2><ul><li>核心接口：Iterator</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 迭代器模式用于遍历集合中的元素</li></ul><h2 id="_11-中介者模式" tabindex="-1">11. 中介者模式 <a class="header-anchor" href="#_11-中介者模式" aria-label="Permalink to &quot;11. 中介者模式&quot;">​</a></h2><ul><li>核心接口：Mediator</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 中介者模式用于简化对象之间的交互</li></ul><h2 id="_12-备忘录模式" tabindex="-1">12. 备忘录模式 <a class="header-anchor" href="#_12-备忘录模式" aria-label="Permalink to &quot;12. 备忘录模式&quot;">​</a></h2><ul><li>核心接口：Memento</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 备忘录模式用于保存和恢复对象的状态</li></ul><h2 id="_13-状态模式" tabindex="-1">13. 状态模式 <a class="header-anchor" href="#_13-状态模式" aria-label="Permalink to &quot;13. 状态模式&quot;">​</a></h2><ul><li>核心接口：State</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 状态模式用于根据对象的状态选择不同的行为</li></ul><h2 id="_14-命令模式" tabindex="-1">14. 命令模式 <a class="header-anchor" href="#_14-命令模式" aria-label="Permalink to &quot;14. 命令模式&quot;">​</a></h2><ul><li>核心接口：Command</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 命令模式用于将请求封装成对象，从而使请求可以参数化、队列化、或记录日志等</li></ul><h2 id="_15-解释器模式" tabindex="-1">15. 解释器模式 <a class="header-anchor" href="#_15-解释器模式" aria-label="Permalink to &quot;15. 解释器模式&quot;">​</a></h2><ul><li>核心接口：Expression</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 解释器模式用于解释和执行表达式</li></ul><h2 id="_16-访问者模式" tabindex="-1">16. 访问者模式 <a class="header-anchor" href="#_16-访问者模式" aria-label="Permalink to &quot;16. 访问者模式&quot;">​</a></h2><ul><li>核心接口：Visitor</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 访问者模式用于访问和操作对象的集合</li></ul><h2 id="_17-建造者模式" tabindex="-1">17. 建造者模式 <a class="header-anchor" href="#_17-建造者模式" aria-label="Permalink to &quot;17. 建造者模式&quot;">​</a></h2><ul><li>核心接口：Builder</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 建造者模式用于创建复杂对象</li></ul><h2 id="_18-外观模式" tabindex="-1">18. 外观模式 <a class="header-anchor" href="#_18-外观模式" aria-label="Permalink to &quot;18. 外观模式&quot;">​</a></h2><ul><li>核心接口：Facade</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 外观模式用于简化复杂系统的接口</li></ul><h2 id="_19-组合模式" tabindex="-1">19. 组合模式 <a class="header-anchor" href="#_19-组合模式" aria-label="Permalink to &quot;19. 组合模式&quot;">​</a></h2><ul><li>核心接口：Component</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 组合模式用于处理树形结构的数据</li></ul><h2 id="_20-享元模式" tabindex="-1">20. 享元模式 <a class="header-anchor" href="#_20-享元模式" aria-label="Permalink to &quot;20. 享元模式&quot;">​</a></h2><ul><li>核心接口：Flyweight</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 享元模式用于优化内存使用，共享相同状态的对象</li></ul><h2 id="_21-原型模式" tabindex="-1">21. 原型模式 <a class="header-anchor" href="#_21-原型模式" aria-label="Permalink to &quot;21. 原型模式&quot;">​</a></h2><ul><li>核心接口：Prototype</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 原型模式用于通过复制现有对象来创建新对象</li></ul><h2 id="_22-桥接模式" tabindex="-1">22. 桥接模式 <a class="header-anchor" href="#_22-桥接模式" aria-label="Permalink to &quot;22. 桥接模式&quot;">​</a></h2><ul><li>核心接口：Bridge</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 桥接模式用于将抽象与实现分离</li></ul><h2 id="_23-过滤器模式" tabindex="-1">23. 过滤器模式 <a class="header-anchor" href="#_23-过滤器模式" aria-label="Permalink to &quot;23. 过滤器模式&quot;">​</a></h2><ul><li>核心接口：Filter</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 过滤器模式用于对数据进行过滤处理</li></ul><h2 id="_24-空对象模式" tabindex="-1">24. 空对象模式 <a class="header-anchor" href="#_24-空对象模式" aria-label="Permalink to &quot;24. 空对象模式&quot;">​</a></h2><ul><li>核心接口：NullObject</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring 空对象模式用于处理空值情况</li></ul>',50)]))}const b=a(r,[["render",n]]);export{d as __pageData,b as default};
