import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.DPDPlp3K.js";const d=JSON.parse('{"title":"Spring Boot Design Pattern","description":"","frontmatter":{},"headers":[],"relativePath":"src/backend/spring-boot/spring-boot-design-pattern.md","filePath":"src/backend/spring-boot/spring-boot-design-pattern.md","lastUpdated":1739530875000}'),o={name:"src/backend/spring-boot/spring-boot-design-pattern.md"};function r(n,l,s,c,u,h){return t(),a("div",null,l[0]||(l[0]=[e('<h1 id="spring-boot-design-pattern" tabindex="-1">Spring Boot Design Pattern <a class="header-anchor" href="#spring-boot-design-pattern" aria-label="Permalink to &quot;Spring Boot Design Pattern&quot;">​</a></h1><h2 id="_1-工厂模式" tabindex="-1">1. 工厂模式 <a class="header-anchor" href="#_1-工厂模式" aria-label="Permalink to &quot;1. 工厂模式&quot;">​</a></h2><ul><li>核心接口：BeanFactory</li><li>核心实现：DefaultListableBeanFactory</li><li>使用场景：Spring Boot 工厂模式用于创建和管理 Bean 对象</li></ul><h2 id="_2-单例模式" tabindex="-1">2. 单例模式 <a class="header-anchor" href="#_2-单例模式" aria-label="Permalink to &quot;2. 单例模式&quot;">​</a></h2><ul><li>核心接口：Singleton</li><li>核心实现：SingletonBeanRegistry</li><li>使用场景：Spring Boot 单例模式用于创建和管理单例 Bean 对象</li></ul><h2 id="_3-观察者模式" tabindex="-1">3. 观察者模式 <a class="header-anchor" href="#_3-观察者模式" aria-label="Permalink to &quot;3. 观察者模式&quot;">​</a></h2><ul><li>核心接口：Observer</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring Boot 观察者模式用于观察和处理对象的变化</li></ul><h2 id="_4-适配器模式" tabindex="-1">4. 适配器模式 <a class="header-anchor" href="#_4-适配器模式" aria-label="Permalink to &quot;4. 适配器模式&quot;">​</a></h2><ul><li>核心接口：Adapter</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring Boot 适配器模式用于将不同的接口适配成统一的接口</li></ul><h2 id="_5-装饰器模式" tabindex="-1">5. 装饰器模式 <a class="header-anchor" href="#_5-装饰器模式" aria-label="Permalink to &quot;5. 装饰器模式&quot;">​</a></h2><ul><li>核心接口：Decorator</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring Boot 装饰器模式用于增强 Bean 的功能</li></ul><h2 id="_6-代理模式" tabindex="-1">6. 代理模式 <a class="header-anchor" href="#_6-代理模式" aria-label="Permalink to &quot;6. 代理模式&quot;">​</a></h2><ul><li>核心接口：Proxy</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring Boot 代理模式用于控制对 Bean 的访问</li></ul><h2 id="_7-策略模式" tabindex="-1">7. 策略模式 <a class="header-anchor" href="#_7-策略模式" aria-label="Permalink to &quot;7. 策略模式&quot;">​</a></h2><ul><li>核心接口：Strategy</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring Boot 策略模式用于根据不同的策略选择不同的实现</li></ul><h2 id="_8-模板方法模式" tabindex="-1">8. 模板方法模式 <a class="header-anchor" href="#_8-模板方法模式" aria-label="Permalink to &quot;8. 模板方法模式&quot;">​</a></h2><ul><li>核心接口：TemplateMethod</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring Boot 模板方法模式用于定义算法的骨架，具体的实现由子类完成</li></ul><h2 id="_9-责任链模式" tabindex="-1">9. 责任链模式 <a class="header-anchor" href="#_9-责任链模式" aria-label="Permalink to &quot;9. 责任链模式&quot;">​</a></h2><ul><li>核心接口：ChainOfResponsibility</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring Boot 责任链模式用于将请求处理流程分解成多个处理器，每个处理器可以决定是否继续处理请求</li></ul><h2 id="_10-迭代器模式" tabindex="-1">10. 迭代器模式 <a class="header-anchor" href="#_10-迭代器模式" aria-label="Permalink to &quot;10. 迭代器模式&quot;">​</a></h2><ul><li>核心接口：Iterator</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring Boot 迭代器模式用于遍历集合中的元素</li></ul><h2 id="_11-中介者模式" tabindex="-1">11. 中介者模式 <a class="header-anchor" href="#_11-中介者模式" aria-label="Permalink to &quot;11. 中介者模式&quot;">​</a></h2><ul><li>核心接口：Mediator</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring Boot 中介者模式用于简化对象之间的交互</li></ul><h2 id="_12-备忘录模式" tabindex="-1">12. 备忘录模式 <a class="header-anchor" href="#_12-备忘录模式" aria-label="Permalink to &quot;12. 备忘录模式&quot;">​</a></h2><ul><li>核心接口：Memento</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring Boot 备忘录模式用于保存和恢复对象的状态</li></ul><h2 id="_13-状态模式" tabindex="-1">13. 状态模式 <a class="header-anchor" href="#_13-状态模式" aria-label="Permalink to &quot;13. 状态模式&quot;">​</a></h2><ul><li>核心接口：State</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring Boot 状态模式用于根据对象的状态选择不同的行为</li></ul><h2 id="_14-命令模式" tabindex="-1">14. 命令模式 <a class="header-anchor" href="#_14-命令模式" aria-label="Permalink to &quot;14. 命令模式&quot;">​</a></h2><ul><li>核心接口：Command</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring Boot 命令模式用于将请求封装成对象，从而使请求可以参数化、队列化、或记录日志等</li></ul><h2 id="_15-解释器模式" tabindex="-1">15. 解释器模式 <a class="header-anchor" href="#_15-解释器模式" aria-label="Permalink to &quot;15. 解释器模式&quot;">​</a></h2><ul><li>核心接口：Expression</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring Boot 解释器模式用于解释和执行表达式</li></ul><h2 id="_16-访问者模式" tabindex="-1">16. 访问者模式 <a class="header-anchor" href="#_16-访问者模式" aria-label="Permalink to &quot;16. 访问者模式&quot;">​</a></h2><ul><li>核心接口：Visitor</li><li>核心实现：AbstractApplicationContext</li><li>使用场景：Spring Boot 访问者模式用于访问和操作对象的集合</li></ul><hr><blockquote><h2 id="abstractapplicationcontext-源码解析" tabindex="-1">AbstractApplicationContext 源码解析 <a class="header-anchor" href="#abstractapplicationcontext-源码解析" aria-label="Permalink to &quot;AbstractApplicationContext 源码解析&quot;">​</a></h2></blockquote><p>AbstractApplicationContext 是 Spring 框架中应用上下文的核心抽象类，它实现了 ConfigurableApplicationContext 接口，为 Spring 应用上下文提供了基础实现。</p><h3 id="核心功能" tabindex="-1">核心功能： <a class="header-anchor" href="#核心功能" aria-label="Permalink to &quot;核心功能：&quot;">​</a></h3><ol><li><p><strong>生命周期管理</strong>：</p><ul><li>通过 <code>refresh()</code> 方法完成应用上下文的初始化</li><li>提供 <code>start()</code> 和 <code>stop()</code> 方法管理应用上下文生命周期</li><li>实现 <code>close()</code> 方法进行资源清理</li></ul></li><li><p><strong>Bean 工厂管理</strong>：</p><ul><li>维护 DefaultListableBeanFactory 实例</li><li>负责 Bean 的加载、注册和依赖注入</li><li>支持 Bean 的后置处理器</li></ul></li><li><p><strong>事件发布机制</strong>：</p><ul><li>实现 ApplicationEventPublisher 接口</li><li>提供 <code>publishEvent()</code> 方法发布应用事件</li><li>支持事件监听器的注册和管理</li></ul></li><li><p><strong>资源管理</strong>：</p><ul><li>实现 ResourceLoader 接口</li><li>提供统一的资源加载机制</li><li>支持多种资源类型（classpath、file、URL 等）</li></ul></li></ol><h3 id="关键方法解析" tabindex="-1">关键方法解析： <a class="header-anchor" href="#关键方法解析" aria-label="Permalink to &quot;关键方法解析：&quot;">​</a></h3><ol><li><p><strong>refresh() 方法</strong>：</p><ul><li>核心方法，负责应用上下文的初始化</li><li>主要步骤： <ul><li>准备刷新：设置启动时间、激活状态等</li><li>获取 BeanFactory：创建或获取内部 BeanFactory</li><li>准备 BeanFactory：配置 BeanFactory 的标准特性</li><li>后置处理 BeanFactory：允许子类对 BeanFactory 进行自定义处理</li><li>调用 BeanFactory 后置处理器：执行所有已注册的 BeanFactoryPostProcessor</li><li>注册 Bean 后置处理器：注册所有 BeanPostProcessor</li><li>初始化消息源：支持国际化</li><li>初始化事件广播器：用于事件发布</li><li>初始化特殊 Bean：如 ApplicationListener</li><li>完成 BeanFactory 初始化：实例化所有非懒加载的单例 Bean</li><li>完成刷新：发布 ContextRefreshedEvent 事件</li></ul></li></ul></li><li><p><strong>getBean() 方法</strong>：</p><ul><li>从 BeanFactory 获取 Bean 实例</li><li>支持按名称、类型获取 Bean</li><li>处理 Bean 的依赖注入和生命周期回调</li></ul></li><li><p><strong>publishEvent() 方法</strong>：</p><ul><li>发布应用事件</li><li>支持同步和异步事件发布</li><li>自动将事件转换为 ApplicationEvent 类型</li></ul></li><li><p><strong>close() 方法</strong>：</p><ul><li>关闭应用上下文</li><li>主要步骤： <ul><li>发布 ContextClosedEvent 事件</li><li>销毁所有单例 Bean</li><li>关闭 BeanFactory</li><li>清理资源</li></ul></li></ul></li></ol><h3 id="设计模式应用" tabindex="-1">设计模式应用： <a class="header-anchor" href="#设计模式应用" aria-label="Permalink to &quot;设计模式应用：&quot;">​</a></h3><ol><li><p><strong>模板方法模式</strong>：</p><ul><li>refresh() 方法定义了应用上下文初始化的流程</li><li>子类可以通过重写特定方法来实现自定义逻辑</li></ul></li><li><p><strong>观察者模式</strong>：</p><ul><li>通过 ApplicationEvent 和 ApplicationListener 实现事件监听机制</li><li>支持解耦的事件发布/订阅模型</li></ul></li><li><p><strong>工厂模式</strong>：</p><ul><li>通过 BeanFactory 管理 Bean 的创建和生命周期</li><li>支持多种 Bean 的创建策略</li></ul></li><li><p><strong>单例模式</strong>：</p><ul><li>默认情况下，Bean 以单例模式创建</li><li>通过 BeanFactory 维护单例 Bean 的实例</li></ul></li></ol><h3 id="扩展点" tabindex="-1">扩展点： <a class="header-anchor" href="#扩展点" aria-label="Permalink to &quot;扩展点：&quot;">​</a></h3><ol><li><p><strong>自定义 BeanFactoryPostProcessor</strong>：</p><ul><li>在 BeanFactory 初始化后，Bean 实例化前进行自定义处理</li><li>常用于修改 Bean 定义或添加自定义属性</li></ul></li><li><p><strong>自定义 BeanPostProcessor</strong>：</p><ul><li>在 Bean 初始化前后进行自定义处理</li><li>常用于实现 AOP、属性注入等特性</li></ul></li><li><p><strong>自定义 Scope</strong>：</p><ul><li>通过实现 Scope 接口扩展 Bean 的作用域</li><li>支持自定义的 Bean 生命周期管理</li></ul></li><li><p><strong>自定义 ResourceLoader</strong>：</p><ul><li>通过实现 ResourceLoader 接口扩展资源加载方式</li><li>支持从自定义位置加载配置文件等资源</li></ul></li></ol><hr><h2 id="_17-建造者模式" tabindex="-1">17. 建造者模式 <a class="header-anchor" href="#_17-建造者模式" aria-label="Permalink to &quot;17. 建造者模式&quot;">​</a></h2><ul><li>核心接口：Builder</li><li>核心实现：SpringApplicationBuilder</li><li>使用场景：Spring Boot 应用启动时的配置构建</li><li>扩展点：通过自定义 Builder 实现来扩展应用配置方式</li></ul><h2 id="_18-外观模式" tabindex="-1">18. 外观模式 <a class="header-anchor" href="#_18-外观模式" aria-label="Permalink to &quot;18. 外观模式&quot;">​</a></h2><ul><li>核心接口：Facade</li><li>核心实现：SpringApplication</li><li>使用场景：简化 Spring Boot 应用的启动和配置过程</li><li>扩展点：通过自定义 ApplicationRunner 或 CommandLineRunner 来扩展启动逻辑</li></ul><h2 id="_19-组合模式" tabindex="-1">19. 组合模式 <a class="header-anchor" href="#_19-组合模式" aria-label="Permalink to &quot;19. 组合模式&quot;">​</a></h2><ul><li>核心接口：Component</li><li>核心实现：Composite</li><li>使用场景：Spring Boot 中的配置属性管理</li><li>扩展点：通过 @ConfigurationProperties 注解扩展配置属性</li></ul><h2 id="_20-享元模式" tabindex="-1">20. 享元模式 <a class="header-anchor" href="#_20-享元模式" aria-label="Permalink to &quot;20. 享元模式&quot;">​</a></h2><ul><li>核心接口：Flyweight</li><li>核心实现：BeanDefinition</li><li>使用场景：Spring Boot 中 Bean 的共享和重用</li><li>扩展点：通过自定义 Scope 实现来扩展 Bean 的生命周期管理</li></ul><h2 id="_21-原型模式" tabindex="-1">21. 原型模式 <a class="header-anchor" href="#_21-原型模式" aria-label="Permalink to &quot;21. 原型模式&quot;">​</a></h2><ul><li>核心接口：Prototype</li><li>核心实现：AbstractBeanDefinition</li><li>使用场景：Spring Boot 中 Bean 的复制和克隆</li><li>扩展点：通过实现 Cloneable 接口来扩展对象的复制行为</li></ul><h2 id="_22-桥接模式" tabindex="-1">22. 桥接模式 <a class="header-anchor" href="#_22-桥接模式" aria-label="Permalink to &quot;22. 桥接模式&quot;">​</a></h2><ul><li>核心接口：Bridge</li><li>核心实现：DataSource</li><li>使用场景：Spring Boot 中数据库连接的管理</li><li>扩展点：通过自定义 DataSource 实现来扩展数据库连接方式</li></ul><h2 id="_23-过滤器模式" tabindex="-1">23. 过滤器模式 <a class="header-anchor" href="#_23-过滤器模式" aria-label="Permalink to &quot;23. 过滤器模式&quot;">​</a></h2><ul><li>核心接口：Filter</li><li>核心实现：ServletFilterRegistrationBean</li><li>使用场景：Spring Boot 中的请求过滤处理</li><li>扩展点：通过实现 Filter 接口来扩展请求处理逻辑</li></ul><h2 id="_24-空对象模式" tabindex="-1">24. 空对象模式 <a class="header-anchor" href="#_24-空对象模式" aria-label="Permalink to &quot;24. 空对象模式&quot;">​</a></h2><ul><li>核心接口：NullObject</li><li>核心实现：NullBean</li><li>使用场景：Spring Boot 中处理空对象的情况</li><li>扩展点：通过自定义 NullBean 实现来扩展空对象处理逻辑</li></ul>',61)]))}const b=i(o,[["render",r]]);export{d as __pageData,b as default};
