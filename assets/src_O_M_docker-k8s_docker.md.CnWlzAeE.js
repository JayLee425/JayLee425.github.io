import{_ as r,c as o,o as c,ag as a}from"./chunks/framework.DPDPlp3K.js";const s=JSON.parse('{"title":"Docker","description":"","frontmatter":{},"headers":[],"relativePath":"src/O&M/docker-k8s/docker.md","filePath":"src/O&M/docker-k8s/docker.md","lastUpdated":1737139361000}'),k={name:"src/O&M/docker-k8s/docker.md"};function l(i,e,D,t,d,n){return c(),o("div",null,e[0]||(e[0]=[a('<h1 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;Docker&quot;">​</a></h1><h2 id="什么是-docker" tabindex="-1">什么是 Docker？ <a class="header-anchor" href="#什么是-docker" aria-label="Permalink to &quot;什么是 Docker？&quot;">​</a></h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 或 Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><h2 id="docker-能做什么" tabindex="-1">Docker 能做什么？ <a class="header-anchor" href="#docker-能做什么" aria-label="Permalink to &quot;Docker 能做什么？&quot;">​</a></h2><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 或 Windows 机器上，也可以实现虚拟化。Docker 的主要功能包括：</p><ul><li><p>打包应用：Docker 可以打包应用以及依赖包到一个轻量级、可移植的容器中。</p></li><li><p>移植性：Docker 容器可以在任何 Linux 或 Windows 机器上运行，并实现虚拟化。</p></li><li><p>环境隔离和资源限制：Docker 可以提供环境隔离和资源限制，确保应用的性能。</p></li><li><p>自动化部署：Docker 可以实现自动化部署，让开发者可以快速发布和更新应用。</p></li><li><p>微服务：Docker 可以实现微服务架构，让开发者可以快速交付单个应用或服务。</p></li><li><p>持续集成和发布：Docker 可以和持续集成工具结合使用，实现持续集成和发布。</p><h2 id="docker-架构" tabindex="-1">Docker 架构 <a class="header-anchor" href="#docker-架构" aria-label="Permalink to &quot;Docker 架构&quot;">​</a></h2><p>Docker 使用客户端-服务器 (C/S) 架构，Docker 客户端与 Docker 守护进程 (Docker daemon) 通信。Docker 客户端和 Docker 守护进程运行在用户的本地机器上。Docker 客户端负责构建、运行和发布 Docker 容器。Docker 守护进程则是 Docker 的核心，负责构建、运行和分发 Docker 容器。Docker 客户端和 Docker 守护进程 communicate via a REST API, over a UNIX socket or a network interface.</p><p>Docker 架构可以分为三个主要组件：</p><ol><li>Docker 客户端：Docker 客户端是一个命令行工具，用户可以通过该工具与 Docker 守护进程通信。Docker 客户端可以执行各种命令，如构建、运行和发布 Docker 容器。</li><li>Docker 守护进程：Docker 守护进程 (dockerd) 监听 Docker API 请求并管理 Docker 对象，如镜像、容器、网络和卷。Docker 守护进程还可以接收来自 Docker 客户端的指令并管理 Docker 服务。</li><li>Docker 仓库：Docker 仓库用来保存 Docker 镜像。Docker Hub 是 Docker 官方提供的公共仓库，用户可以直接从 Docker Hub 获取镜像。</li></ol><h2 id="docker-镜像" tabindex="-1">Docker 镜像 <a class="header-anchor" href="#docker-镜像" aria-label="Permalink to &quot;Docker 镜像&quot;">​</a></h2><p>Docker 镜像是一个轻量级、可执行的包，里面包含了应用运行所需的一切。镜像是 Docker 容器运行的基础，每个镜像由一系列层组成，这些层可以共享相同的基础镜像。镜像可以被用来创建 Docker 容器，一个镜像可以创建多个容器。</p><p>Docker 镜像是一个只读的模板，包含了运行应用所需的一切，包括代码、运行时、库、环境变量、配置文件等。镜像可以用来创建 Docker 容器，一个镜像可以创建多个容器。</p><h2 id="docker-容器" tabindex="-1">Docker 容器 <a class="header-anchor" href="#docker-容器" aria-label="Permalink to &quot;Docker 容器&quot;">​</a></h2><p>Docker 容器是一个运行中的应用实例，它是镜像的运行实例。容器包含了应用运行所需的一切，包括代码、运行时、库、环境变量、配置文件等。容器可以被创建、启动、停止、删除、暂停等。</p><p>Docker 容器是一个轻量级、可移植的应用虚拟化环境，它可以被用来部署和运行分布式应用。容器与宿主机共享相同的内核，因此它们对系统资源的利用率很高。容器可以被用来创建微服务架构，让开发者可以快速交付单个应用或服务。</p><h2 id="docker-仓库" tabindex="-1">Docker 仓库 <a class="header-anchor" href="#docker-仓库" aria-label="Permalink to &quot;Docker 仓库&quot;">​</a></h2><p>Docker 仓库用来保存 Docker 镜像。Docker Hub 是 Docker 官方提供的公共仓库，用户可以直接从 Docker Hub 获取镜像。Docker 仓库可以分为公共仓库和私有仓库。公共仓库可以让所有人都可以访问，私有仓库则可以让组织内部的开发者和用户共享镜像。</p><h2 id="docker-网络" tabindex="-1">Docker 网络 <a class="header-anchor" href="#docker-网络" aria-label="Permalink to &quot;Docker 网络&quot;">​</a></h2><p>Docker 网络可以让容器互相通信，Docker 网络包括三种类型：</p><ol><li>主机网络：默认情况下，Docker 容器可以直接使用主机的网络。</li><li>容器网络：Docker 容器可以互相通信，容器之间可以直接通过 IP 地址通信。</li><li>自定义网络：用户可以创建自定义的 Docker 网络，容器可以加入到自定义的网络中。</li></ol><h2 id="docker-数据管理" tabindex="-1">Docker 数据管理 <a class="header-anchor" href="#docker-数据管理" aria-label="Permalink to &quot;Docker 数据管理&quot;">​</a></h2><p>Docker 数据管理包括镜像管理、容器管理、存储管理、网络管理和插件管理。</p><ol><li>镜像管理：用户可以管理 Docker 镜像，包括删除、导入、导出、分享等。</li><li>容器管理：用户可以管理 Docker 容器，包括查看、启动、停止、删除、暂停等。</li><li>存储管理：用户可以管理 Docker 容器的数据卷，包括查看、创建、删除、挂载、卸载等。</li><li>网络管理：用户可以管理 Docker 网络，包括查看、创建、删除等。</li><li>插件管理：用户可以管理 Docker 插件，包括安装、卸载、升级等。</li></ol><h2 id="docker-安全" tabindex="-1">Docker 安全 <a class="header-anchor" href="#docker-安全" aria-label="Permalink to &quot;Docker 安全&quot;">​</a></h2><p>Docker 安全包括镜像安全、容器安全、网络安全、存储安全、插件安全和安全扫描。</p><ol><li>镜像安全：镜像安全包括镜像扫描、镜像签名、镜像分发等。</li><li>容器安全：容器安全包括容器隔离、容器权限控制、容器运行时权限控制等。</li><li>网络安全：网络安全包括网络隔离、网络访问控制、网络流量控制等。</li><li>存储安全：存储安全包括存储加密、存储访问控制、存储空间管理等。</li><li>插件安全：插件安全包括插件隔离、插件权限控制等。</li><li>安全扫描：安全扫描包括漏洞扫描、恶意软件扫描等。</li></ol><h2 id="docker-总结" tabindex="-1">Docker 总结 <a class="header-anchor" href="#docker-总结" aria-label="Permalink to &quot;Docker 总结&quot;">​</a></h2><p>Docker 是一种轻量级、可移植的应用容器引擎，它可以打包应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 或 Windows 机器上，也可以实现虚拟化。Docker 的主要功能包括打包应用、移植性、环境隔离和资源限制、自动化部署、微服务、持续集成和发布。 Docker 架构包括客户端-服务器 (C/S) 架构、Docker 客户端、Docker 守护进程、Docker 仓库、Docker 镜像、Docker 容器、Docker 网络、Docker 数据管理、Docker 安全。 Docker 安全包括镜像安全、容器安全、网络安全、存储安全、插件安全和安全扫描。 Docker 总结了 Docker 的主要功能、架构和安全。 Docker 是一个非常强大的工具，可以帮助开发者快速交付应用，提升开发效率，降低开发成本，提高软件质量。 Docker 还可以实现微服务架构，让开发者可以快速交付单个应用或服务。</p></li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://docs.docker.com/" target="_blank" rel="noreferrer">Docker 官方文档</a></li><li><a href="https://blog.docker.com/" target="_blank" rel="noreferrer">Docker 官方博客</a></li><li><a href="https://forums.docker.com/" target="_blank" rel="noreferrer">Docker 官方论坛</a></li><li><a href="https://github.com/docker" target="_blank" rel="noreferrer">Docker 官方仓库</a></li></ul>',8)]))}const p=r(k,[["render",l]]);export{s as __pageData,p as default};
