import{_ as e,c as s,o as i,ag as t}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"Spring Cloud Gateway with Nacos","description":"","frontmatter":{},"headers":[],"relativePath":"src/Middleware/Nacos/Spring-Cloud-Gateway.md","filePath":"src/Middleware/Nacos/Spring-Cloud-Gateway.md","lastUpdated":1737139361000}'),n={name:"src/Middleware/Nacos/Spring-Cloud-Gateway.md"};function r(l,a,o,p,h,c){return i(),s("div",null,a[0]||(a[0]=[t(`<h1 id="spring-cloud-gateway-with-nacos" tabindex="-1">Spring Cloud Gateway with Nacos <a class="header-anchor" href="#spring-cloud-gateway-with-nacos" aria-label="Permalink to &quot;Spring Cloud Gateway with Nacos&quot;">​</a></h1><p>This article will show you how to use Spring Cloud Gateway with Nacos as the configuration center.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><p>Before you start, make sure you have the following:</p><ul><li>A Nacos server running on your local machine or in the cloud.</li><li>Spring Boot 2.2.x or above.</li><li>Spring Cloud Gateway 2.2.x or above.</li><li>Java 8 or above.</li></ul><h2 id="set-up-nacos-server" tabindex="-1">Set up Nacos Server <a class="header-anchor" href="#set-up-nacos-server" aria-label="Permalink to &quot;Set up Nacos Server&quot;">​</a></h2><p>If you don&#39;t have a Nacos server running, you can follow the instructions below to set up a local Nacos server.</p><ol><li>Download the Nacos server from the official website: <a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noreferrer">https://github.com/alibaba/nacos/releases</a>.</li><li>Extract the downloaded file and run the following command to start the server:</li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sh startup.sh -m standalone</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="create-a-spring-cloud-gateway-project" tabindex="-1">Create a Spring Cloud Gateway Project <a class="header-anchor" href="#create-a-spring-cloud-gateway-project" aria-label="Permalink to &quot;Create a Spring Cloud Gateway Project&quot;">​</a></h2><p>To create a Spring Cloud Gateway project, you can use the Spring Initializr: <a href="https://start.spring.io/" target="_blank" rel="noreferrer">https://start.spring.io/</a>.</p><ol><li>Choose the following options: <ul><li>Project: Gradle Project</li><li>Language: Java</li><li>Spring Boot: 2.2.x</li><li>Group: your group id</li><li>Artifact: your artifact id</li><li>Name: your project name</li><li>Description: your project description</li><li>Package name: your package name</li><li>Packaging: Jar</li><li>Java: 8</li><li>Dependencies: Spring Web, Spring Cloud Gateway, Spring Cloud Nacos Discovery</li></ul></li><li>Click the Generate Project button to download the project.</li><li>Extract the downloaded file and import it into your IDE.</li></ol><h2 id="configure-nacos-server" tabindex="-1">Configure Nacos Server <a class="header-anchor" href="#configure-nacos-server" aria-label="Permalink to &quot;Configure Nacos Server&quot;">​</a></h2><p>To configure Nacos server, you need to add the following configuration to your <code>application.yml</code> file:</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  cloud</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    nacos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      discovery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        server-addr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">127.0.0.1:8848</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>This configuration tells Spring Cloud Gateway to use Nacos as the configuration center.</p><h2 id="create-a-route" tabindex="-1">Create a Route <a class="header-anchor" href="#create-a-route" aria-label="Permalink to &quot;Create a Route&quot;">​</a></h2><p>To create a route, you need to create a class that extends <code>RouteLocator</code> and add a <code>route</code> method that returns a <code>Builder</code> object. The <code>Builder</code> object allows you to specify the route&#39;s ID, URI, and other properties.</p><p>Here&#39;s an example:</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GatewayRoutes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RouteLocator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RouteLocator </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRoutes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> route </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> route</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:8080&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>This example creates a route that matches any request with the path <code>/api/**</code> and forwards it to <code>http://localhost:8080</code>.</p><h2 id="register-the-gateway" tabindex="-1">Register the Gateway <a class="header-anchor" href="#register-the-gateway" aria-label="Permalink to &quot;Register the Gateway&quot;">​</a></h2><p>To register the gateway with Nacos, you need to add the following configuration to your <code>application.yml</code> file:</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gateway</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>This configuration tells Nacos to register the gateway with the name <code>gateway</code>.</p><h2 id="run-the-gateway" tabindex="-1">Run the Gateway <a class="header-anchor" href="#run-the-gateway" aria-label="Permalink to &quot;Run the Gateway&quot;">​</a></h2><p>To run the gateway, you can use the Spring Boot plugin in your IDE or run the following command in the project directory:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>./gradlew bootRun</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>This will start the gateway and register it with Nacos.</p><h2 id="test-the-gateway" tabindex="-1">Test the Gateway <a class="header-anchor" href="#test-the-gateway" aria-label="Permalink to &quot;Test the Gateway&quot;">​</a></h2><p>To test the gateway, you can send a request to <code>http://localhost:8080/api/test</code>. If everything is set up correctly, you should see the response &quot;Hello, World!&quot; in the response body.</p><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>In this article, we have shown how to use Spring Cloud Gateway with Nacos as the configuration center. We have also created a route and registered the gateway with Nacos. Finally, we have tested the gateway by sending a request to it.</p><p>⚠️ ⚠️ Tips:</p><ul><li>Make sure to use the correct version of Spring Cloud Gateway and Nacos.</li><li>Make sure to configure the correct server address in the <code>server-addr</code> property of the <code>spring.cloud.nacos.discovery</code> configuration.</li><li>Make sure to set the correct <code>spring.application.name</code> property in the <code>application.yml</code> file.</li></ul><table tabindex="0"><thead><tr><th>Spring Cloud Gateway Version</th><th>Nacos Version</th><th>Java</th></tr></thead><tbody><tr><td>2.2.x</td><td>1.2.1</td><td>8 or above</td></tr></tbody></table><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><a href="https://spring.io/projects/spring-cloud-gateway" target="_blank" rel="noreferrer">Spring Cloud Gateway</a></li><li><a href="https://spring.io/projects/spring-cloud-nacos-discovery" target="_blank" rel="noreferrer">Spring Cloud Nacos Discovery</a></li><li><a href="https://nacos.io/" target="_blank" rel="noreferrer">Nacos</a></li></ul><h2 id="conclusion-1" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion-1" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>In this article, we have shown how to use Spring Cloud Gateway with Nacos as the configuration center. We have also created a route and registered the gateway with Nacos. Finally, we have tested the gateway by sending a request to it.</p><p>⚠️ ⚠️ Tips:</p><ul><li>Make sure to use the correct version of Spring Cloud Gateway and Nacos.</li><li>Make sure to configure the correct server address in the <code>server-addr</code> property of the <code>spring.cloud.nacos.discovery</code> configuration.</li></ul><p>that this is just a basic example and there are many more features available in Spring Cloud Gateway and Nacos that you can use to build more complex routing and configuration scenarios.</p>`,43)]))}const g=e(n,[["render",r]]);export{u as __pageData,g as default};
