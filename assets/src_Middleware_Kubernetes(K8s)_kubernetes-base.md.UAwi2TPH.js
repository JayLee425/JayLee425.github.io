import{_ as t,c as r,o as l,ag as s}from"./chunks/framework.DPDPlp3K.js";const d=JSON.parse('{"title":"Kubernetes(K8s)(zh-CN)","description":"","frontmatter":{},"headers":[],"relativePath":"src/Middleware/Kubernetes(K8s)/kubernetes-base.md","filePath":"src/Middleware/Kubernetes(K8s)/kubernetes-base.md","lastUpdated":1737139361000}'),n={name:"src/Middleware/Kubernetes(K8s)/kubernetes-base.md"};function u(i,e,b,a,o,K){return l(),r("div",null,e[0]||(e[0]=[s('<h1 id="kubernetes-k8s-zh-cn" tabindex="-1">Kubernetes(K8s)(zh-CN) <a class="header-anchor" href="#kubernetes-k8s-zh-cn" aria-label="Permalink to &quot;Kubernetes(K8s)(zh-CN)&quot;">​</a></h1><h2 id="kubernetes是什么" tabindex="-1">Kubernetes是什么 <a class="header-anchor" href="#kubernetes是什么" aria-label="Permalink to &quot;Kubernetes是什么&quot;">​</a></h2><p>Kubernetes是一个开源的，用于自动部署、扩展和管理容器化应用程序的平台。它最初由Google设计，并于2014年捐赠给Cloud Native Computing Foundation（CNCF）。</p><p>Kubernetes的目标是提供一种高效、可靠和可扩展的方式来运行容器化应用程序。它通过自动化的容器编排、负载均衡、服务发现、自动扩展和自我修复等功能，帮助开发者和运维人员简化应用程序的部署和管理过程。</p><p>Kubernetes的核心组件包括：</p><ul><li>Master节点：负责管理整个集群，包括调度容器、维护集群状态、处理API请求等。</li><li>Node节点：运行容器化的应用程序，提供计算资源。</li><li>控制平面：集群的核心组件，包括API服务器、调度器、控制器、存储、网络等。</li><li>容器运行时：负责运行容器，如Docker、rkt等。</li></ul><h2 id="kubernetes架构" tabindex="-1">Kubernetes架构 <a class="header-anchor" href="#kubernetes架构" aria-label="Permalink to &quot;Kubernetes架构&quot;">​</a></h2><p>Kubernetes的架构由Master节点、Node节点和控制平面组成。</p><p><img src="https://d33wubrfki0l68.cloudfront.net/e0d9d5d/e1c7d/images/docs/kubernetes-components.svg" alt="Kubernetes架构"></p><ul><li>Master节点：Master节点是Kubernetes集群的核心，负责管理整个集群，包括调度容器、维护集群状态、处理API请求等。Master节点由API服务器、调度器、控制器、存储、网络等组件组成。</li><li>Node节点：Node节点是Kubernetes集群的工作节点，运行容器化的应用程序，提供计算资源。Node节点由kubelet、kube-proxy、容器运行时等组件组成。</li><li>控制平面：控制平面是Kubernetes集群的核心组件，包括API服务器、调度器、控制器、存储、网络等。</li><li>容器运行时：容器运行时是Kubernetes集群运行容器的环境，如Docker、rkt等。</li></ul><h2 id="kubernetes的优势" tabindex="-1">Kubernetes的优势 <a class="header-anchor" href="#kubernetes的优势" aria-label="Permalink to &quot;Kubernetes的优势&quot;">​</a></h2><p>Kubernetes的优势主要有以下几点：</p><ul><li>自动化部署：Kubernetes可以自动部署和扩展容器化的应用程序，并提供自动化的滚动更新、回滚等功能，大大降低了运维成本。</li><li>弹性伸缩：Kubernetes可以根据应用的负载情况自动扩展或缩减集群，有效地利用资源，提高集群的利用率。</li><li>服务发现和负载均衡：Kubernetes可以自动发现和负载均衡集群内的应用服务，实现应用的高可用。</li><li>自动故障转移和恢复：Kubernetes可以自动检测和恢复集群内的故障，保证应用的高可用。</li><li>存储编排：Kubernetes可以自动化地管理存储，包括动态供应、存储调度、存储生命周期管理等。</li><li>密钥和配置管理：Kubernetes可以集成密钥和配置管理系统，实现应用配置的集中和动态更新。</li><li>多租户支持：Kubernetes可以支持多租户的部署，实现应用的隔离和安全。</li></ul><h2 id="kubernetes的应用场景" tabindex="-1">Kubernetes的应用场景 <a class="header-anchor" href="#kubernetes的应用场景" aria-label="Permalink to &quot;Kubernetes的应用场景&quot;">​</a></h2><p>Kubernetes的应用场景非常广泛，包括但不限于以下几种：</p><ul><li>微服务架构：Kubernetes可以很好地支持微服务架构，通过自动部署、扩展和管理微服务，提高应用的灵活性和可维护性。</li><li>容器化应用：Kubernetes可以运行容器化的应用程序，提供高效、可靠和可扩展的容器编排和管理。</li><li>大数据和机器学习：Kubernetes可以运行大数据和机器学习应用，提供自动化的资源调度和负载均衡，提高应用的性能和可扩展性。</li><li>云原生应用：Kubernetes可以部署和管理云原生应用，包括容器化应用、微服务、Serverless等。</li><li>金融服务：Kubernetes可以部署和管理金融服务，包括交易系统、支付系统、风险控制系统等。</li></ul><h2 id="kubernetes的安装" tabindex="-1">Kubernetes的安装 <a class="header-anchor" href="#kubernetes的安装" aria-label="Permalink to &quot;Kubernetes的安装&quot;">​</a></h2><p>Kubernetes的安装主要分为以下几个步骤：</p><ol><li>配置Kubernetes环境：安装Kubernetes前，需要配置Kubernetes的环境，包括安装Docker、配置Kubernetes的仓库等。</li><li>安装Kubernetes主节点：安装Kubernetes主节点，包括安装Kubernetes主节点的操作系统、配置Kubernetes主节点的环境变量、安装Kubernetes主节点的软件包等。</li><li>安装Kubernetes节点：安装Kubernetes节点，包括安装Kubernetes节点的操作系统、配置Kubernetes节点的环境变量、安装Kubernetes节点的软件包等。</li><li>配置Kubernetes集群：配置Kubernetes集群，包括配置Kubernetes的网络、存储、DNS等。</li><li>启动Kubernetes集群：启动Kubernetes集群，包括启动Kubernetes主节点和Kubernetes节点。</li></ol><h2 id="kubernetes的常用命令" tabindex="-1">Kubernetes的常用命令 <a class="header-anchor" href="#kubernetes的常用命令" aria-label="Permalink to &quot;Kubernetes的常用命令&quot;">​</a></h2><p>Kubernetes的常用命令包括以下几种：</p><ul><li>kubectl get nodes：获取Kubernetes集群中的节点信息。</li><li>kubectl get pods：获取Kubernetes集群中的Pod信息。</li><li>kubectl get services：获取Kubernetes集群中的服务信息。</li><li>kubectl get deployments：获取Kubernetes集群中的部署信息。</li><li>kubectl get replicasets：获取Kubernetes集群中的副本集信息。</li><li>kubectl get namespaces：获取Kubernetes集群中的命名空间信息。</li><li>kubectl create namespace：创建Kubernetes集群中的命名空间。</li><li>kubectl delete namespace：删除Kubernetes集群中的命名空间。</li><li>kubectl describe pod：获取Kubernetes集群中Pod的详细信息。</li><li>kubectl logs pod：获取Kubernetes集群中Pod的日志信息。</li><li>kubectl exec pod -- command：在Kubernetes集群中执行命令。</li><li>kubectl expose deployment --port=80 --type=NodePort：暴露Kubernetes集群中Deployment的服务。</li><li>kubectl scale deployment/replicaset/job/statefulset --replicas=3：缩放Kubernetes集群中Deployment、副本集、Job或状态集的副本数量。</li><li>kubectl apply -f file.yaml：创建Kubernetes集群中资源。</li><li>kubectl delete -f file.yaml：删除Kubernetes集群中资源。</li><li>kubectl config view：查看Kubernetes集群的配置信息。</li><li>kubectl config set-cluster my-cluster --server=<a href="https://192.168.0.100:6443" target="_blank" rel="noreferrer">https://192.168.0.100:6443</a>：设置Kubernetes集群的配置信息。</li><li>kubectl config set-credentials my-user --client-key=~/.kube/my-user.key --client-certificate=~/.kube/my-user.crt --embed-certs=true：设置Kubernetes集群的认证信息。</li><li>kubectl config set-context my-context --cluster=my-cluster --user=my-user --namespace=default：设置Kubernetes集群的上下文信息。</li><li>kubectl config use-context my-context：使用Kubernetes集群的上下文信息。</li><li>kubectl run my-nginx --image=nginx --port=80：在Kubernetes集群中运行nginx。</li><li>kubectl expose deployment my-nginx --port=80 --type=NodePort：暴露Kubernetes集群中nginx的服务。</li><li>kubectl get events --sort-by=.metadata.creationTimestamp：获取Kubernetes集群中事件信息。</li><li>kubectl create secret generic my-secret --from-literal=mykey=myvalue：创建Kubernetes集群中密钥。</li><li>kubectl get secret my-secret：获取Kubernetes集群中密钥。</li></ul><h2 id="kubernetes的扩展" tabindex="-1">Kubernetes的扩展 <a class="header-anchor" href="#kubernetes的扩展" aria-label="Permalink to &quot;Kubernetes的扩展&quot;">​</a></h2><p>Kubernetes的扩展主要包括以下几种：</p><ul><li>集群扩展：通过扩展Kubernetes集群，可以增加节点、增加存储、增加网络等。</li><li>应用扩展：通过扩展Kubernetes的应用，可以运行更多类型的应用，如数据库、消息队列等。</li><li>插件扩展：通过扩展Kubernetes的插件，可以实现更复杂的功能，如日志、监控、审计等。</li></ul><h2 id="kubernetes的版本" tabindex="-1">Kubernetes的版本 <a class="header-anchor" href="#kubernetes的版本" aria-label="Permalink to &quot;Kubernetes的版本&quot;">​</a></h2><p>Kubernetes的版本分为以下几种：</p><ul><li>稳定版：Kubernetes的稳定版，如1.12、1.13等。</li><li>开发版：Kubernetes的开发版，如1.14-alpha.1、1.15-beta.0等。</li><li>预览版：Kubernetes的预览版，如1.16.0-alpha.1、1.17.0-alpha.0等。</li></ul><h2 id="kubernetes的生态" tabindex="-1">Kubernetes的生态 <a class="header-anchor" href="#kubernetes的生态" aria-label="Permalink to &quot;Kubernetes的生态&quot;">​</a></h2><p>Kubernetes的生态主要包括以下几方面：</p><ul><li>工具：Kubernetes的工具包括kubectl、kubeadm、kubelet、kube-proxy、kube-controller-manager、kube-scheduler等。</li><li>编排工具：Kubernetes的编排工具包括Helm、Kustomize、Ksonnet、Kubeflow等。</li><li>集群管理工具：Kubernetes的集群管理工具包括Rancher、KubeSphere、TKEStack等。</li><li>监控工具：Kubernetes的监控工具包括Prometheus、ElasticSearch、Kube-state-metrics等。</li><li>日志工具：Kubernetes的日志工具包括Fluentd、EFK等。</li><li>存储工具：Kubernetes的存储工具包括Ceph、GlusterFS、Rook等。</li><li>网络工具：Kubernetes的网络工具包括Flannel、Calico、WeaveNet等。</li><li>安全工具：Kubernetes的安全工具包括Open Policy Agent、Keystone、Dex等。</li><li>自动化工具：Kubernetes的自动化工具包括Argo、Kubeflow、Tekton等。</li><li>其他工具：Kubernetes的其他工具包括Kublr、Kube-bench等。</li></ul><h2 id="kubernetes的未来" tabindex="-1">Kubernetes的未来 <a class="header-anchor" href="#kubernetes的未来" aria-label="Permalink to &quot;Kubernetes的未来&quot;">​</a></h2><p>Kubernetes的未来主要包括以下几方面：</p><ul><li>性能优化：Kubernetes的性能优化主要包括调度优化、资源优化、网络优化等。</li><li>安全性优化：Kubernetes的安全性优化主要包括认证优化、授权优化、网络安全优化等。</li><li>自动化运维：Kubernetes的自动化运维主要包括自动化部署、自动化扩缩容、自动化回滚、自动化监控等。</li><li>多云支持：Kubernetes的多云支持主要包括AWS、Azure、GCP等。</li><li>边缘计算支持：Kubernetes的边缘计算支持主要包括KubeEdge、KubeVirt等。</li><li>容器运行时支持：Kubernetes的容器运行时支持主要包括Docker、containerd、CRI-O等。</li><li>云原生支持：Kubernetes的云原生支持主要包括Serverless、Operator、Custom Resource Definition等。</li><li>自动化测试：Kubernetes的自动化测试主要包括单元测试、集成测试、E2E测试等。</li><li>自动化运维工具：Kubernetes的自动化运维工具主要包括Kubeflow、Tekton等。</li><li>云原生应用：Kubernetes的云原生应用主要包括Serverless、Operator、Custom Resource Definition等。</li></ul><h2 id="kubernetes的架构" tabindex="-1">Kubernetes的架构 <a class="header-anchor" href="#kubernetes的架构" aria-label="Permalink to &quot;Kubernetes的架构&quot;">​</a></h2><p>Kubernetes的架构主要包括以下几部分：</p><ul><li>Master节点：Master节点是Kubernetes集群的控制节点，负责管理集群中的所有资源和工作负载。Master节点包括API Server、Scheduler、Controller Manager、etcd等组件。</li><li>Worker节点：Worker节点是Kubernetes集群的工作节点，负责运行应用程序和工作负载。Worker节点包括kubelet、kube-proxy、container runtime等组件。</li><li>etcd：etcd是Kubernetes集群的分布式键值存储，用于存储集群的配置信息和状态信息。</li></ul><p><img src="https://d33wubrfki0l68.cloudfront.net/e0d9d5d/e1c7d/images/docs/kubernetes-arch.svg" alt="Kubernetes架构图"></p><h2 id="kubernetes的工作原理" tabindex="-1">Kubernetes的工作原理 <a class="header-anchor" href="#kubernetes的工作原理" aria-label="Permalink to &quot;Kubernetes的工作原理&quot;">​</a></h2><p>Kubernetes的工作原理主要包括以下几个步骤：</p><ol><li>调度器：调度器负责将Pod调度到一个可用的Node节点上。</li><li>控制器：控制器是Kubernetes系统的核心组件，负责维护集群的状态，比如副本控制器、Endpoints控制器、Namespace控制器等。</li><li>kubelet：kubelet是Kubernetes的agent，负责管理Pod和Node节点上的容器。</li><li>容器运行时：容器运行时负责运行容器，如Docker、rkt等。</li></ol><p><img src="https://d33wubrfki0l68.cloudfront.net/e0d9d5d/e1c7d/images/docs/kubernetes-how-it-works.svg" alt="Kubernetes工作原理图"></p>',42)]))}const k=t(n,[["render",u]]);export{d as __pageData,k as default};
