import{_ as e,c as l,o as t,ag as a}from"./chunks/framework.DPDPlp3K.js";const n=JSON.parse('{"title":"git 最佳实践","description":"","frontmatter":{},"headers":[],"relativePath":"src/Middleware/git/git-base.md","filePath":"src/Middleware/git/git-base.md","lastUpdated":1739530875000}'),o={name:"src/Middleware/git/git-base.md"};function c(d,i,r,g,u,h){return t(),l("div",null,i[0]||(i[0]=[a('<h1 id="git-最佳实践" tabindex="-1">git 最佳实践 <a class="header-anchor" href="#git-最佳实践" aria-label="Permalink to &quot;git 最佳实践&quot;">​</a></h1><h2 id="git-核心命令" tabindex="-1">Git 核心命令 <a class="header-anchor" href="#git-核心命令" aria-label="Permalink to &quot;Git 核心命令&quot;">​</a></h2><h3 id="_1-git-init" tabindex="-1">1. git init <a class="header-anchor" href="#_1-git-init" aria-label="Permalink to &quot;1. git init&quot;">​</a></h3><ul><li>功能：初始化一个新的 Git 仓库</li><li>用法：<code>git init [目录名]</code></li><li>示例：<code>git init my-project</code></li></ul><h3 id="_2-git-clone" tabindex="-1">2. git clone <a class="header-anchor" href="#_2-git-clone" aria-label="Permalink to &quot;2. git clone&quot;">​</a></h3><ul><li>功能：克隆远程仓库到本地</li><li>用法：<code>git clone &lt;仓库地址&gt;</code></li><li>示例：<code>git clone https://github.com/user/repo.git</code></li></ul><h3 id="_3-git-add" tabindex="-1">3. git add <a class="header-anchor" href="#_3-git-add" aria-label="Permalink to &quot;3. git add&quot;">​</a></h3><ul><li>功能：将文件添加到暂存区</li><li>用法： <ul><li><code>git add &lt;文件名&gt;</code> 添加单个文件</li><li><code>git add .</code> 添加所有修改文件</li></ul></li><li>示例：<code>git add index.html</code></li></ul><h3 id="_4-git-commit" tabindex="-1">4. git commit <a class="header-anchor" href="#_4-git-commit" aria-label="Permalink to &quot;4. git commit&quot;">​</a></h3><ul><li>功能：提交暂存区的更改</li><li>用法：<code>git commit -m &quot;提交信息&quot;</code></li><li>示例：<code>git commit -m &quot;添加首页文件&quot;</code></li></ul><h3 id="_5-git-status" tabindex="-1">5. git status <a class="header-anchor" href="#_5-git-status" aria-label="Permalink to &quot;5. git status&quot;">​</a></h3><ul><li>功能：查看工作区和暂存区的状态</li><li>用法：<code>git status</code></li><li>示例：<code>git status</code></li></ul><h3 id="_6-git-push" tabindex="-1">6. git push <a class="header-anchor" href="#_6-git-push" aria-label="Permalink to &quot;6. git push&quot;">​</a></h3><ul><li>功能：将本地提交推送到远程仓库</li><li>用法：<code>git push &lt;远程仓库&gt; &lt;分支&gt;</code></li><li>示例：<code>git push origin main</code></li></ul><h3 id="_7-git-pull" tabindex="-1">7. git pull <a class="header-anchor" href="#_7-git-pull" aria-label="Permalink to &quot;7. git pull&quot;">​</a></h3><ul><li>功能：从远程仓库拉取更新</li><li>用法：<code>git pull &lt;远程仓库&gt; &lt;分支&gt;</code></li><li>示例：<code>git pull origin main</code></li></ul><h3 id="_8-git-branch" tabindex="-1">8. git branch <a class="header-anchor" href="#_8-git-branch" aria-label="Permalink to &quot;8. git branch&quot;">​</a></h3><ul><li>功能：管理分支</li><li>用法： <ul><li><code>git branch</code> 查看分支</li><li><code>git branch &lt;分支名&gt;</code> 创建新分支</li><li><code>git branch -d &lt;分支名&gt;</code> 删除分支</li></ul></li><li>示例：<code>git branch feature/login</code></li></ul><h3 id="_9-git-checkout" tabindex="-1">9. git checkout <a class="header-anchor" href="#_9-git-checkout" aria-label="Permalink to &quot;9. git checkout&quot;">​</a></h3><ul><li>功能：切换分支或恢复文件</li><li>用法： <ul><li><code>git checkout &lt;分支名&gt;</code> 切换分支</li><li><code>git checkout -- &lt;文件名&gt;</code> 恢复文件</li></ul></li><li>示例：<code>git checkout develop</code></li></ul><h3 id="_10-git-merge" tabindex="-1">10. git merge <a class="header-anchor" href="#_10-git-merge" aria-label="Permalink to &quot;10. git merge&quot;">​</a></h3><ul><li>功能：合并分支</li><li>用法：<code>git merge &lt;分支名&gt;</code></li><li>示例：<code>git merge feature/login</code></li></ul><h3 id="_11-git-log" tabindex="-1">11. git log <a class="header-anchor" href="#_11-git-log" aria-label="Permalink to &quot;11. git log&quot;">​</a></h3><ul><li>功能：查看提交历史</li><li>用法：<code>git log</code></li><li>选项： <ul><li><code>--oneline</code> 简洁显示</li><li><code>--graph</code> 图形化显示</li></ul></li><li>示例：<code>git log --oneline --graph</code></li></ul><h3 id="_12-git-reset" tabindex="-1">12. git reset <a class="header-anchor" href="#_12-git-reset" aria-label="Permalink to &quot;12. git reset&quot;">​</a></h3><ul><li>功能：重置当前分支的 HEAD</li><li>用法： <ul><li><code>git reset --soft &lt;commit&gt;</code> 保留工作区和暂存区</li><li><code>git reset --mixed &lt;commit&gt;</code> 保留工作区</li><li><code>git reset --hard &lt;commit&gt;</code> 丢弃所有修改</li></ul></li><li>示例：<code>git reset --hard HEAD~1</code></li></ul><h3 id="_13-git-stash" tabindex="-1">13. git stash <a class="header-anchor" href="#_13-git-stash" aria-label="Permalink to &quot;13. git stash&quot;">​</a></h3><ul><li>功能：暂存当前工作目录的修改</li><li>用法： <ul><li><code>git stash</code> 暂存修改</li><li><code>git stash pop</code> 恢复暂存的修改</li><li><code>git stash list</code> 查看暂存列表</li></ul></li><li>示例：<code>git stash</code></li></ul><h3 id="_14-git-tag" tabindex="-1">14. git tag <a class="header-anchor" href="#_14-git-tag" aria-label="Permalink to &quot;14. git tag&quot;">​</a></h3><ul><li>功能：管理标签</li><li>用法： <ul><li><code>git tag</code> 查看标签</li><li><code>git tag &lt;标签名&gt;</code> 创建轻量标签</li><li><code>git tag -a &lt;标签名&gt; -m &quot;信息&quot;</code> 创建带注释的标签</li><li><code>git push origin &lt;标签名&gt;</code> 推送标签到远程</li></ul></li><li>示例：<code>git tag v1.0.0</code></li></ul><h3 id="_15-git-remote" tabindex="-1">15. git remote <a class="header-anchor" href="#_15-git-remote" aria-label="Permalink to &quot;15. git remote&quot;">​</a></h3><ul><li>功能：管理远程仓库</li><li>用法： <ul><li><code>git remote -v</code> 查看远程仓库</li><li><code>git remote add &lt;名称&gt; &lt;地址&gt;</code> 添加远程仓库</li></ul></li><li>示例：<code>git remote add origin https://github.com/user/repo.git</code></li></ul><h3 id="_16-git-fetch" tabindex="-1">16. git fetch <a class="header-anchor" href="#_16-git-fetch" aria-label="Permalink to &quot;16. git fetch&quot;">​</a></h3><ul><li>功能：从远程仓库获取更新</li><li>用法：<code>git fetch &lt;远程仓库名&gt;</code></li><li>示例：<code>git fetch origin</code></li></ul><h3 id="_17-git-rebase" tabindex="-1">17. git rebase <a class="header-anchor" href="#_17-git-rebase" aria-label="Permalink to &quot;17. git rebase&quot;">​</a></h3><ul><li>功能：变基操作，将当前分支的提交移动到另一个分支的顶部</li><li>用法：<code>git rebase &lt;分支名&gt;</code></li><li>示例：<code>git rebase main</code></li></ul><h3 id="_18-git-cherry-pick" tabindex="-1">18. git cherry-pick <a class="header-anchor" href="#_18-git-cherry-pick" aria-label="Permalink to &quot;18. git cherry-pick&quot;">​</a></h3><ul><li>功能：选择某个提交应用到当前分支</li><li>用法：<code>git cherry-pick &lt;commit&gt;</code></li><li>示例：<code>git cherry-pick abc1234</code></li></ul><h3 id="_19-git-bisect" tabindex="-1">19. git bisect <a class="header-anchor" href="#_19-git-bisect" aria-label="Permalink to &quot;19. git bisect&quot;">​</a></h3><ul><li>功能：使用二分查找定位引入 bug 的提交</li><li>用法： <ul><li><code>git bisect start</code> 开始二分查找</li><li><code>git bisect good &lt;commit&gt;</code> 标记好的提交</li><li><code>git bisect bad &lt;commit&gt;</code> 标记坏的提交</li></ul></li><li>示例：<code>git bisect start</code></li></ul><h3 id="_20-git-submodule" tabindex="-1">20. git submodule <a class="header-anchor" href="#_20-git-submodule" aria-label="Permalink to &quot;20. git submodule&quot;">​</a></h3><ul><li>功能：管理子模块</li><li>用法： <ul><li><code>git submodule add &lt;仓库地址&gt;</code> 添加子模块</li><li><code>git submodule update --init --recursive</code> 初始化子模块</li></ul></li><li>示例：<code>git submodule add https://github.com/user/repo.git</code></li></ul><h3 id="_21-git-worktree" tabindex="-1">21. git worktree <a class="header-anchor" href="#_21-git-worktree" aria-label="Permalink to &quot;21. git worktree&quot;">​</a></h3><ul><li>功能：管理多个工作目录</li><li>用法： <ul><li><code>git worktree add &lt;路径&gt; &lt;分支&gt;</code> 添加工作目录</li><li><code>git worktree list</code> 列出工作目录</li></ul></li><li>示例：<code>git worktree add ../feature feature/login</code></li></ul><h3 id="_22-git-reflog" tabindex="-1">22. git reflog <a class="header-anchor" href="#_22-git-reflog" aria-label="Permalink to &quot;22. git reflog&quot;">​</a></h3><ul><li>功能：查看引用日志，记录所有 HEAD 的更改</li><li>用法：<code>git reflog</code></li><li>示例：<code>git reflog show</code></li></ul><h3 id="_23-git-describe" tabindex="-1">23. git describe <a class="header-anchor" href="#_23-git-describe" aria-label="Permalink to &quot;23. git describe&quot;">​</a></h3><ul><li>功能：描述最近的标签</li><li>用法：<code>git describe</code></li><li>示例：<code>git describe --tags</code></li></ul><h3 id="_24-git-archive" tabindex="-1">24. git archive <a class="header-anchor" href="#_24-git-archive" aria-label="Permalink to &quot;24. git archive&quot;">​</a></h3><ul><li>功能：创建代码归档</li><li>用法：<code>git archive --format=zip --output=archive.zip &lt;分支名&gt;</code></li><li>示例：<code>git archive --format=zip --output=release.zip main</code></li></ul><h3 id="_25-git-blame" tabindex="-1">25. git blame <a class="header-anchor" href="#_25-git-blame" aria-label="Permalink to &quot;25. git blame&quot;">​</a></h3><ul><li>功能：查看文件的每一行最后修改信息</li><li>用法：<code>git blame &lt;文件路径&gt;</code></li><li>示例：<code>git blame src/index.js</code></li></ul><h3 id="_26-git-clean" tabindex="-1">26. git clean <a class="header-anchor" href="#_26-git-clean" aria-label="Permalink to &quot;26. git clean&quot;">​</a></h3><ul><li>功能：清理未跟踪的文件</li><li>用法： <ul><li><code>git clean -n</code> 查看将要删除的文件</li><li><code>git clean -f</code> 强制删除未跟踪的文件</li></ul></li><li>示例：<code>git clean -fd</code></li></ul><h3 id="_27-git-revert" tabindex="-1">27. git revert <a class="header-anchor" href="#_27-git-revert" aria-label="Permalink to &quot;27. git revert&quot;">​</a></h3><ul><li>功能：撤销指定提交</li><li>用法：<code>git revert &lt;commit&gt;</code></li><li>示例：<code>git revert abc1234</code></li></ul><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><ul><li>使用 <code>git status</code> 查看工作区和暂存区的状态</li><li>使用 <code>git add</code> 添加文件到暂存区</li><li>使用 <code>git commit</code> 提交更改</li><li>使用 <code>git push</code> 推送更改到远程仓库</li><li>使用 <code>git pull</code> 拉取远程仓库的更改</li><li>使用 <code>git branch</code> 管理分支</li><li>使用 <code>git checkout</code> 切换分支</li><li>使用 <code>git merge</code> 合并分支</li><li>使用 <code>git rebase</code> 变基操作</li><li>使用 <code>git cherry-pick</code> 选择提交应用到当前分支</li><li>使用 <code>git bisect</code> 二分查找定位引入 bug 的提交</li><li>使用 <code>git submodule</code> 管理子模块</li><li>使用 <code>git worktree</code> 管理多个工作目录</li><li>使用 <code>git reflog</code> 查看引用日志</li><li>使用 <code>git describe</code> 描述最近的标签</li><li>使用 <code>git archive</code> 创建代码归档</li><li>使用 <code>git blame</code> 查看文件的每一行最后修改信息</li><li>使用 <code>git clean</code> 清理未跟踪的文件</li><li>使用 <code>git revert</code> 撤销指定提交</li></ul><hr><h2 id="使用-git-amend-修改最后一次提交" tabindex="-1">&gt; 使用 git amend 修改最后一次提交 <a class="header-anchor" href="#使用-git-amend-修改最后一次提交" aria-label="Permalink to &quot;&gt;  使用 git amend 修改最后一次提交&quot;">​</a></h2><h2 id="git-commit-amend" tabindex="-1"><code>git commit --amend</code> <a class="header-anchor" href="#git-commit-amend" aria-label="Permalink to &quot;`git commit --amend`&quot;">​</a></h2><ul><li>功能：修改最后一次提交</li><li>用法：<code>git commit --amend</code></li><li>使用场景： <ul><li>修改提交信息</li><li>添加遗漏的文件到提交</li><li>修改提交内容</li></ul></li><li>注意事项： <ul><li>会创建一个新的提交，替换原来的提交</li><li>如果已经推送到远程仓库，需要强制推送</li><li>谨慎使用，避免影响他人工作</li></ul></li><li>示例： <ul><li>修改提交信息：<code>git commit --amend -m &quot;新的提交信息&quot;</code></li><li>添加文件到提交：<code>git add 遗漏的文件</code> + <code>git commit --amend --no-edit</code></li></ul></li></ul><blockquote><ul><li>✅使用 git cherry-pick --no-ff 合并分支时保留分支信息</li><li>❎使用 git rebase -i 交互式变基</li><li>❎使用 git tag -f 强制更新标签</li><li>❎使用 git push --tags 推送标签到远程仓库</li></ul></blockquote>',63)]))}const m=e(o,[["render",c]]);export{n as __pageData,m as default};
